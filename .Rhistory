grep('IL',colnames(training))
index<-c(1)
index<-grep('IL',colnames(training))
index<-c(1,index)
index<-c(1,grep('IL',colnames(training)))
training_IL<-training[,index]
View(training_IL)
testing_IL<-testing[,index]
preProc<-preProcess(training_IL,method='pca',thresh=0.8)
View(training_IL)
modelFit<-train(diagnosis~.,method='glm',data=training_IL)
install.packages('e1071')
modelFit<-train(diagnosis~.,method='glm',data=training_IL)
confusionMatrix(testing_IL$disgnosis,predict(modelFit,newdata=testing_IL))
confusionMatrix(predict(modelFit,newdata=testing_IL),testing_IL$disgnosis)
View(testing)
View(testing_IL)
View(training_IL)
confusionMatrix(testing_IL$diagnosis,predict(modelFit,newdata=testing_IL))
confusionMatrix(predict(modelFit,newdata=testing_IL),testing_IL$diagnosis)
modelFit<-train(diagnosis~.,method='glm',preprocess='pca',data=training_IL)
?train
modelFit<-train(diagnosis~.,method='glm',preprocess='pca',data=training_IL,trControl=trainControl(preProcOptions = list(thresh = 0.95)))
modelFit<-train(diagnosis~.,method='glm',preprocess='pca',data=training_IL,trControl=trainControl(preProcOptions = list(thresh = 0.80)))
warnings()
modelFit<-train(training_IL$diagnosis~.,method='glm',preprocess='pca',data=training_IL,trControl=trainControl(preProcOptions = list(thresh = 0.80)))
modelFit<-train(diagnosis~.,method='glm',preProcess='pca',data=training_IL,trControl=trainControl(preProcOptions = list(thresh = 0.80)))
confusionMatrix(testing_IL$diagnosis,predict(modelFit,newdata=testing_IL)
)
modelFit<-train(diagnosis~.,method='glm',data=training_IL)
confusionMatrix(testing_IL$diagnosis,predict(modelFit,newdata=testing_IL))
confusionMatrix(testing_IL$diagnosis,predict(modelFit,testing_IL))
index<-c(1,grep('IL',colnames(training))
training_IL<-training[,index]
testing_IL<-testing[,index]
modelFit<-train(diagnosis~.,method='glm',data=training_IL)
confusionMatrix(testing_IL$diagnosis,predict(modelFit,newdata=testing_IL))
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
index<-c(1,grep('IL',colnames(training))
training_IL<-training[,index]
testing_IL<-testing[,index]
modelFit<-train(diagnosis~.,method='glm',data=training_IL)
confusionMatrix(testing_IL$diagnosis,predict(modelFit,newdata=testing_IL))
index<-c(1,grep('IL',colnames(training)))
training_IL<-training[,index]
testing_IL<-testing[,index]
modelFit<-train(diagnosis~.,method='glm',data=training_IL)
confusionMatrix(testing_IL$diagnosis,predict(modelFit,newdata=testing_IL))
modelFit<-train(diagnosis~.,method='glm',preProcess='pca',data=training_IL,trControl=trainControl(preProcOptions = list(thresh = 0.80)))
confusionMatrix(testing_IL$diagnosis,predict(modelFit,newdata=testing_IL))
modelFit<-train(diagnosis~.,method='glm',data=training_IL)
predictor<-predict(modelFit,newdata=testing_IL)
confusionMatrix(testing_IL$diagnosis,predictor)
confusionMatrix(predictor,testing_IL$diagnosis)
set.seed(3433)
grep the predictors starting with 'IL'
IL_str <- grep("^IL", colnames(training), value = TRUE)
make a subset of these predictors
predictors_IL <- predictors[, IL_str]
df <- data.frame(diagnosis, predictors_IL)
inTrain = createDataPartition(df$diagnosis, p = 3/4)[[1]]
training = df[inTrain, ]
testing = df[-inTrain, ]
train the data using the first method
modelFit <- train(diagnosis ~ ., method = "glm", data = training)
set.seed(3433)
IL_str <- grep("^IL", colnames(training), value = TRUE)
predictors_IL <- predictors[, IL_str]
df <- data.frame(diagnosis, predictors_IL)
inTrain = createDataPartition(df$diagnosis, p = 3/4)[[1]]
training = df[inTrain, ]
testing = df[-inTrain, ]
modelFit <- train(diagnosis ~ ., method = "glm", data = training)
predictions <- predict(modelFit, newdata = testing)
C1 <- confusionMatrix(predictions, testing$diagnosis)
print(C1)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
preProcess(training[,grep('^IL',colnames(training),value=TRUE)],method='pca',thresh=0.9)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
index<-c(1,grep('^IL',colnames(training)))
training_IL<-training[,index]
testing_IL<-testing[,index]
modelFit<-train(diagnosis~.,method='glm',data=training_IL)
predictor<-predict(modelFit,newdata=testing_IL)
confusionMatrix(testing_IL$diagnosis,predictor)
modelFit<-train(diagnosis~.,method='glm',preProcess='pca',data=training_IL,trControl=trainControl(preProcOptions = list(thresh = 0.80)))
confusionMatrix(testing_IL$diagnosis,predict(modelFit,newdata=testing_IL))
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
trainData<-createDataPartition(y=SegmentationOrigianl$Case, p=0.75, List = FALSE)
trainData<-createDataPartition(y=SegmentationOrigianl$Case, p=0.75, list = FALSE)
trainData<-createDataPartition(y=segmentationOrigianl$Case, p=0.75, list = FALSE)
trainData<-createDataPartition(y=segmentationOriginal$Case, p=0.75, list = FALSE)
View(trainData)
View(segmentationOriginal)
?train
?createDataPartition
View(segmentationOriginal)
?subset
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
###
trainData<-subset(segmentationOriginal,Case=="Train")
testData<-subset(segmentationOriginal,Case=="Test")
set.seed(125)
View(segmentationOriginal)
modelFit<-train(Class~.,method="rpart",data=trainData)
print(modelFit$finalModel)
View(testData)
install.packages('rattle')
require(rattle)
fancyRpartPlot(modelFit$FinalModel)
fancyRpartPlot(modelFit$finalModel)
install.packages('rpart.plot')
fancyRpartPlot(modelFit$finalModel)
install.packages('pgmm')
library(pgmm)
data(olive)
olive = olive[,-1]
View(olive)
?tree
install.packages('tree')
?tree
??tree
View(olive)
library(pgmm)
data(olive)
olive = olive[,-1]
###
##
modelFit<-train(Area~.,method="rpart",data=olive)
require(rattle)
fancyRpartPlot(modelFit$finalModel)
newdata = as.data.frame(t(colMeans(olive)))
predict(modelFit,newdata)
View(olive)
library(pgmm)
data(olive)
olive = olive[,-1]
###
##
modelFit<-train(Area~.,method="treebag",data=olive)
predict(modelFit,newdata)
library(pgmm)
data(olive)
olive = olive[,-1]
###
##
modelFit<-train(Area~.,method="treebag",data=olive)
require(rattle)
fancyRpartPlot(modelFit$finalModel)
library(pgmm)
data(olive)
olive = olive[,-1]
###
##
modelFit<-train(Area~.,method="treebag",data=olive)
predict(modelFit,newdata)
library(pgmm)
data(olive)
olive = olive[,-1]
###
##
modelFit<-train(Area~.,method="rpart2",data=olive)
predict(modelFit,newdata)
install.packages('ElemStatLearn')
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
View(trainSA)
?SAHEart
?SAHeart
??SAHeart
modelFit<-train(chd~age+alocohol+obesity+tobacco+typea+ldl,method="glm",family="binomial",data=trainSA)
modelFit<-train(chd~age+alcohol+obesity+tobacco+typea+ldl,method="glm",family="binomial",data=trainSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(trainSA$chd,predict(modelFit,trainSA))
missClass(testSA$chd,predict(modelFit,testSA))
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
view(vowel.test)
View(vowel.test)
vowel.test$y<-as.factor(vowel.test$y)
?varImp
?randomForest
?train
modelFit<-train(y~.,method='rf',data=vowel.train)
varImp(modelFit)
varImp(modelFit$finalModel)
varImp(modelFit$finalFit)
??randomForest
importance(modelFit)
modelFit<-train(y~.,method='rf',data=vowel.train,importance=TRUE)
varImp(modelFit$finalFit)
varImp(modelFit)
require(caret)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
## end given
vowel.test$y<- as.factor(vowel.test$y)
vowel.train$y<- as.factor(vowel.train$y)
set.seed(33833)
modelFit<-train(y~.,method='rf',data=vowel.train,importance=TRUE)
varImp(modelFit)
order(varImp(modelFit))
?order
?varImp
??varImp.randomForest
x<-modelFit$finalModel
varImp(x)
varImp(x,sacle=FALSE)
varImp(x,scale=FALSE)
z<-varIMp(x)
z<-varImp(x)
order(z)
varImp(modelFit$finalModel)
set.seed(33833)
# Fit a random forest predictor relating the factor variable y to the remaining variables.
a <- randomForest(y ~ ., data = vowel.train, importance = FALSE)
b <- varImp(a)
order(b)
varImp(a)
set.seed(33833)
modelFit<-train(y~.,method='rf',data=vowel.train,importance=TRUE,trControl = trainControl(method = "oob"))
??trainControl
>>randomForest
??randomForest
?randomForest
set.seed(33833)
modelFit<-randomForest(y~.,data=vowel.train,importance=TRUE)
varImp(modelFit)
varImp(modelFit)
varImp(modelFit$finalModel)
varImp(modelFit$finalModel)
imp<-varImp(modelFit)
set.seed(33833)
modelFit<-randomForest(y~.,data=vowel.train,importance=FALSE)
varImp(modelFit)
set.seed(33833)
modelFit<-train(y~.,method='rf',data=vowel.train,importance=FALSE,trControl = trainControl(method = "oob"))
mf1<-varImp(modelFit$finalModel)
View(mf1)
order(mf1,desc)
?order
order(mf1,descreasing=TRUE)
varImp(mf1)
order(mf1)
order(mf1,decreasing=TRUE)
set.seed(33833)
modelFit<-train(y~.,method='rf',data=vowel.train,importance=FALSE)
mf1<-varImp(modelFit$finalModel)
order(mf1,decreasing=TRUE)
set.seed(33833)
modelFit<-train(y~.,method='rf',data=vowel.train)
mf1<-varImp(modelFit$finalModel)
order(mf1,decreasing=TRUE)
set.seed(33833)
modelFit<-randomForest(y~.,data=vowel.train,importance=FALSE)
varImp(modelFit)
set.seed(33833)
modelFit<-randomForest(y~.,data=vowel.train,importance=FALSE)
varImp(modelFit)
?train
require(caret)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
## end given
vowel.test$y<- as.factor(vowel.test$y)
vowel.train$y<- as.factor(vowel.train$y)
set.seed(33833)
modelFit<-train(y~.,method='rf',data=vowel.train,importance=TRUE)
order(varImp(modelFit$finalModel),decreasing=TRUE)
modelFit<-train(y~.,method='rf',data=vowel.train,importance=FALSE)
order(varImp(modelFit$finalModel),decreasing=TRUE)
set.seed(33833)
modelFit2<-randomForest(y~.,data=vowel.train)
varImp(modelFit2)
set.seed(33833)
modelFit2<-randomForest(y~.,data=vowel.train)
order(varImp(modelFit2),decreasing=TRUE)
require(caret)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
## end given
vowel.test$y<- as.factor(vowel.test$y)
vowel.train$y<- as.factor(vowel.train$y)
set.seed(33833)
modelFit<-randomForest(y~.,data=vowel.train)
order(varImp(modelFit$finalModel),decreasing=TRUE)
require(caret)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
## end given
vowel.test$y<- as.factor(vowel.test$y)
vowel.train$y<- as.factor(vowel.train$y)
set.seed(33833)
modelFit<-randomForest(y~.,data=vowel.train)
order(varImp(modelFit),decreasing=TRUE)
read.csv
?read.csv
setwd("~/Coursera/Data Scientist/8 - Practical Machine Learning/Peer_Assign")
read.csv("./data.pml_training.csv")
read.csv("./data.pml-training.csv")
fred<-read.csv("./data/pml-training.csv")
View(fred)
trainData<-read.csv("./data/pml-training.csv",na.strings=c("NA","","#DIV/0!"))
View(trainData)
testData<-read.csv("./data/pml-testing.csv",na.strings=c("NA","","#DIV/0!"))
View(testData)
head(trainData$classe)
head(testData$classe)
colnames(trainData)
colnames(testData)
testData$problem_id
View(testData)
trainData<-subset(trainData, select = -c(X,
username,
raw_timestamp_part_1,
raw_timestamp_part_2,
cvtd_timestamp,
new_window,
num_window,) )
trainData<-subset(trainData, select = -c("X",
"username",
"raw_timestamp_part_1",
"raw_timestamp_part_2",
"cvtd_timestamp",
"new_window",
"num_window",) )
trainData<-trainData[,!colnames(trainData) %in% c("X","username","raw_timestamp_part_1","raw_timestamp_part_2","cvtd_timestamp","new_window", "num_window")]
View(trainData)
trainData<-trainData[,!colnames(trainData) %in% c("X","user_name","raw_timestamp_part_1","raw_timestamp_part_2","cvtd_timestamp","new_window", "num_window")]
trainData$classe<-as.factor(trainData$Classe)
trainData$Classe<-as.factor(trainData$Classe)
trainData$Classe<-as.factor(trainData$classe)
View(trainData)
library(caret)
library(caret)
testIndex = createDataPartition(trainData, p = 0.70,list=FALSE)
testIndex = createDataPartition(trainData$classe, p = 0.70,list=FALSE)
training = trainData[testIndex,]
testing = trainData[-testIndex,]
library(randomForest)
set.seed(32767)
modelFit<-randomForest(classe~.,data=training)
?train
names(getModelInfo())
modelFitRF<-train(classe~.,method='rf',data=training)
modelFitRF<-train(classe~.,method="rf",data=training)
training$class
training$classe
colnames(trainData)
training$classe
modelFitRF<-train(classe ~ .,method="rf",data=training)
setwd("~/Coursera/Data Scientist/8 - Practical Machine Learning/Peer_Assign")
trainData<-read.csv("./data/pml-training.csv",na.strings=c("NA","","#DIV/0!"))
testData<-read.csv("./data/pml-testing.csv",na.strings=c("NA","","#DIV/0!"))
trainData<-trainData[,!colnames(trainData) %in% c("X","user_name","raw_timestamp_part_1","raw_timestamp_part_2","cvtd_timestamp","new_window", "num_window")]
trainData$classe<-as.factor(trainData$classe)
testData<-testData[,!colnames(testData) %in% c("X","user_name","raw_timestamp_part_1","raw_timestamp_part_2","cvtd_timestamp","new_window", "num_window")]
library(caret)
testIndex = createDataPartition(trainData$classe, p = 0.70,list=FALSE)
training = trainData[testIndex,]
testing = trainData[-testIndex,]
set.seed(32767)
modelFitRF<-train(classe~.,method='rf',data=training)
NAs <- apply(training,2,function(x) {sum(is.na(x))});
validData <- trainRawData[,which(NAs == 0)];
validData <- training[,which(NAs == 0)];
?apply
setwd("~/Coursera/Data Scientist/8 - Practical Machine Learning/Peer_Assign")
trainData<-read.csv("./data/pml-training.csv",na.strings=c("NA","","#DIV/0!"))
testData<-read.csv("./data/pml-testing.csv",na.strings=c("NA","","#DIV/0!"))
trainData<-trainData[,!colnames(trainData) %in% c("X","user_name","raw_timestamp_part_1","raw_timestamp_part_2","cvtd_timestamp","new_window", "num_window")]
testData<-testData[,!colnames(testData) %in% c("X","user_name","raw_timestamp_part_1","raw_timestamp_part_2","cvtd_timestamp","new_window", "num_window")]
trainNAs<-apply(trainData,2,function(x) {sum(is.na(x))})
testNAs<-apply(testData,2,function(x) {sum(is.na(x))})
trainData<-trainData[,which(trainNAs == 0)]
testData<-testData[,which(testNAs == 0)]
trainData$classe<-as.factor(trainData$classe)
library(caret)
testIndex = createDataPartition(trainData$classe, p = 0.70,list=FALSE)
training = trainData[testIndex,]
testing = trainData[-testIndex,]
set.seed(32767)
modelFitRF<-train(classe~.,method='rf',data=training)
install.packages("parallel")
library(parallel)
vignette(parallel)
vignette("parallel")
?train
trControl = trainControl(allowParallel =TRUE);
modelFitRF<-train(classe~.,method='rf',data=training,trControl=trControl)
trControl = trainControl(method = "cv", number = 4, allowParallel =TRUE);
modelFitRF<-train(classe~.,method='rf',data=training,trControl=trControl)
??doParalle
??doParallel
install.packages("doParallel")
??doParallel
modelFitRF<-train(classe~.,method='rf',data=training)
library(doParallel)
registerDoParallel(makeCluster(detectCores()))
modelFitRF<-train(classe~.,method='rf',data=training)
set.seed(32767)
library(doParallel)
cl <- makeCluster(3)  # Use 3 cores
registerDoParallel(cl)
## Random Forest
modelFitRF<-train(classe~.,method='rf',data=training)
detetcCores()
detectCores()
setwd("~/Coursera/Data Scientist/8 - Practical Machine Learning/Peer_Assign")
trainData<-read.csv("./data/pml-training.csv",na.strings=c("NA","","#DIV/0!"))
testData<-read.csv("./data/pml-testing.csv",na.strings=c("NA","","#DIV/0!"))
trainData<-trainData[,!colnames(trainData) %in% c("X","user_name","raw_timestamp_part_1","raw_timestamp_part_2","cvtd_timestamp","new_window", "num_window")]
testData<-testData[,!colnames(testData) %in% c("X","user_name","raw_timestamp_part_1","raw_timestamp_part_2","cvtd_timestamp","new_window", "num_window")]
trainNAs<-apply(trainData,2,function(x) {sum(is.na(x))})
testNAs<-apply(testData,2,function(x) {sum(is.na(x))})
trainData<-trainData[,which(trainNAs == 0)]
testData<-testData[,which(testNAs == 0)]
trainData$classe<-as.factor(trainData$classe)
library(caret)
testIndex = createDataPartition(trainData$classe, p = 0.70,list=FALSE)
training = trainData[testIndex,]
testing = trainData[-testIndex,]
set.seed(32767)
library(doParallel)
cl <- makeCluster(3)  ##My computer has 4 cores, so set to use 3
registerDoParallel(cl)
## Random Forest
modelFitRF<-train(classe~.,method='rf',data=training)
## Boosted Tree (slide 8/12)
modelFitBT<-train(classe~.,method='gbm',data=training)
fitControl <- trainControl(## 10-fold CV
method = "repeatedcv",
number = 10,
## repeated ten times
repeats = 10)
modelFitRF<-train(classe~.,method='rf',data=training, trcontrol=fitControl)
print(modelFitBT)
confusionMatrix
confusionMatrix(predict(modelFitBT,testing),testing$classe)
confusionMatrix(predict(modelFitRF,testing),testing$classe)
confusionMatrix(predict(modelFitRF,testing),testing$classe)$Accuracy
confusionMatrix(predict(modelFitRF,testing),testing$classe)$accuracy
confusionMatrix(predict(modelFitRF,testing),testing$classe)$overall['accuracy']
confusionMatrix(predict(modelFitRF,testing),testing$classe)$overall['Accuracy']
cmRF<-confusionMatrix(predict(modelFitRF,testing),testing$classe)
cmBT<-confusionMatrix(predict(modelFitBT,testing),testing$classe)
accuracyRF<-cmRF$overall['Accuracy']
accuracyBT<-cmBT$overall['Accuracy']
accuracyBT
accuracyRF
predictRF<-predict(modelFitRF,testing)
outErrorRF<-sum(predictRF==testing$classe)/length(testing$class)
testPredict<-predict(modelFitRF,testData)
testPredict
results<-as.vector(testPredict)
setwd("./answers")
pml_write_files(results)
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(results)
print(cmBT)
setwd("./..")
print(results)
set.seed(32767)
library(doParallel)
cl <- makeCluster(3)  ##My computer has 4 cores, so set to use 3
registerDoParallel(cl)
## set the train control options
fitControl <- trainControl(## 10-fold CV
method = "repeatedcv",
number = 10,
## repeated ten times
repeats = 10)
## Random Forest
modelFitRF<-train(classe~.,method='rf',data=training, trcontrol=fitControl)
